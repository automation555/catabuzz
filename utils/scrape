#!/usr/bin/env ruby
$: << "utils/"
require 'optparse'
require 'catalogDownloader.rb'


RAILS_ENV = "development"
require "config/environment"

def drop_db(config)
  case config['adapter']
  when 'mysql'
    ActiveRecord::Base.connection.drop_database config['database']
  when /^sqlite/
    puts "deleting: " + File.join(RAILS_ROOT, config['database'])
    FileUtils.rm_f(File.join(RAILS_ROOT, config['database']))
  when 'postgresql'
    `dropdb "#{config['database']}"`
  end
end

def setupDb(keepDb)
  unless keepDb
    config = ActiveRecord::Base.configurations[RAILS_ENV]
  	drop_db(config)
  	load(File.join(RAILS_ROOT, "db/schema.rb"))
	end
end

options = {
  :remoteHost => "http://info.sjsu.edu/",
  :remoteLocation => "/web-dbgen/soc-fall-courses/",
  :localHostRootDir => "./utils/downloads",
  :keepDatabase => false
}

parser = OptionParser.new do |op|
  op.banner = "Usage: (download|scrape|both|update) [-D] [-k] [-h REMOTE_HOST] [-l REMOTE_LOCATION] [-d LOCAL_HOST_ROOT_DIR]\n"
  
  op.on("-h REMOTE_HOST", "(Default: #{options[:remoteHost]})") { |val| options[:remoteHost] = val}
  op.on("-l REMOTE_LOCATION", "(Default: #{options[:remoteLocation]})") { |val| options[:remoteLocation] = val}
  op.on("-d LOCAL_HOST_ROOT_DIR", "(Default: #{options[:localHostRootDir]})") { |val| options[:localHostRootDir] = val}
  op.on("-k", "Keep existin't database (default purges db)") {options[:keepDatabase] = true}
  op.on("-D", "--debug", "Use DEBUG mode") {require 'ruby-debug'}
end

action = ARGV.shift
if ["download", "scrape", "both", "update"].include? action
  # got the right command
  parser.parse!
  if(action == "download" or action == "both")
    downloader = CatalogDownloader.new(options[:remoteHost], options[:remoteLocation], options[:localHostRootDir])
    downloader.download
  end
  if(action == "scrape" or action == "both")
    setupDb(options[:keepDatabase])
    scraper = CatalogScraper.new(options[:localHostRootDir], options[:remoteLocation])
    scraper.scrape
  end
  if(action == "update")
    puts "'update' not implemented yet!"
  end
else
  puts parser
  exit(1)
end
